#!/usr/bin/python3

import json
import os.path
import subprocess
import sys


runDir = os.path.dirname(os.path.abspath(__file__))


def operation_pod_uuid() ->str:
    p = subprocess.run(['sudo', 'rkt', 'list', '--format=json'],
                       check=True,
                       stdin=subprocess.DEVNULL,
                       stdout=subprocess.PIPE)
    j = json.loads(p.stdout.decode('utf-8'))
    for pod in j:
        if pod["state"] != "running":
            continue
        app = pod["apps"][0]
        if app["name"] != "ubuntu":
            continue
        user_labels = app.get('user_labels')
        if user_labels is None:
            continue
        if user_labels.get('name') == 'operation':
            return pod["name"]
    raise RuntimeError('no operation pod')


def operation_pid() ->str:
    uuid = operation_pod_uuid()
    p = subprocess.run(['sudo', 'rkt', 'status', uuid],
                       check=True,
                       stdin=subprocess.DEVNULL,
                       stdout=subprocess.PIPE)
    for line in p.stdout.decode('utf-8').splitlines():
        if line.startswith('pid='):
            return line[4:]
    raise RuntimeError('no pid')


def run(pid: str, cmd: str, args: [str]):
    subprocess.run(['sudo', 'nsenter', '-n', '-t', pid, cmd,
                   '-F', os.path.join(runDir, 'ssh_config'), *args],
                   check=True)


def main():
    opid = operation_pid()
    if os.path.basename(__file__) == 'dcscp':
        cmd = 'scp'
    else:
        cmd = 'ssh'
    run(opid, cmd, sys.argv[1:])


if __name__ == '__main__':
    main()
