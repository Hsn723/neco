CONTAINERD_VERSION = 1.2.4
PROTOC_VERSION = 3.6.1
CRITOOLS_VERSION = 1.13.0
SUDO = sudo

### for debian package
PACKAGES := fakeroot btrfs-tools pkg-config libdevmapper-dev libseccomp-dev
WORKDIR := $(CURDIR)/work
CONTROL := $(WORKDIR)/DEBIAN/control
DOCDIR := $(WORKDIR)/usr/share/doc
BINDIR := $(WORKDIR)/usr/bin
SBINDIR := $(WORKDIR)/usr/sbin
LIBEXECDIR := $(WORKDIR)/usr/libexec/neco
SHAREDIR := $(WORKDIR)/usr/share/neco
VERSION = 0.0.1-master
DEST = .
DEB = neco_$(VERSION)_amd64.deb
BIN_PKGS = ./pkg/neco
SBIN_PKGS = ./pkg/neco-updater ./pkg/neco-worker ./pkg/sabakan-serf-handler

NODE_EXPORTER_VERSION = 0.17.0
NODE_EXPORTER_URL = https://github.com/prometheus/node_exporter/archive/v$(NODE_EXPORTER_VERSION).tar.gz

all: deb

deb: $(DEB)

$(DEB): node_exporter containerd crictl
	cp -r debian $(WORKDIR)
	mkdir -p $(WORKDIR)/src $(BINDIR) $(SBINDIR) $(SHAREDIR) $(DOCDIR)/neco $(DOCDIR)/node_exporter
	sed 's/@VERSION@/$(patsubst v%,%,$(VERSION))/' debian/DEBIAN/control > $(CONTROL)
	GOBIN=$(BINDIR) go install -tags='$(GOTAGS)' $(BIN_PKGS)
	GOBIN=$(SBINDIR) go install -tags='$(GOTAGS)' $(SBIN_PKGS)
	cp etc/* $(SHAREDIR)
	cp -a ignitions $(SHAREDIR)
	cp README.md LICENSE $(DOCDIR)/neco
	chmod -R g-w $(WORKDIR)
	$(FAKEROOT) dpkg-deb --build $(WORKDIR) $(DEST)
	rm -rf $(WORKDIR)

node_exporter:
	mkdir -p $(WORKDIR)/src $(SBINDIR) $(DOCDIR)/node_exporter $(LIBEXECDIR)
	curl -fsSL $(NODE_EXPORTER_URL) | tar -C $(WORKDIR)/src --strip-components=1 -xzf -
	cd $(WORKDIR)/src; GO111MODULE=on make build
	mv $(WORKDIR)/src/node_exporter $(SBINDIR)/
	ln -s /usr/sbin/node_exporter $(LIBEXECDIR)/node_exporter
	cd $(WORKDIR)/src; cp LICENSE NOTICE README.md VERSION $(DOCDIR)/node_exporter/
	rm -rf $(WORKDIR)/src

containerd:
	rm -rf $(GOPATH)/src/github.com/containerd/containerd
	mkdir -p $(GOPATH)/src/github.com/containerd/containerd $(LIBEXECDIR)
	curl -fsSL -o containerd.tar.gz https://github.com/containerd/containerd/archive/v${CONTAINERD_VERSION}.tar.gz
	tar -x -z --strip-components 1 -f containerd.tar.gz -C $(GOPATH)/src/github.com/containerd/containerd
	rm -f containerd.tar.gz
	(cd $(GOPATH)/src/github.com/containerd/containerd; make VERSION=$(CONTAINERD_VERSION))
	cp $(GOPATH)/src/github.com/containerd/containerd/bin/containerd $(LIBEXECDIR)
	cp $(GOPATH)/src/github.com/containerd/containerd/bin/containerd-shim $(LIBEXECDIR)
	cp $(GOPATH)/src/github.com/containerd/containerd/bin/ctr $(LIBEXECDIR)

crictl:
	mkdir -p $(LIBEXECDIR)
	curl -fsSL -o crictl.tar.gz https://github.com/kubernetes-sigs/cri-tools/releases/download/v$(CRITOOLS_VERSION)/crictl-v$(CRITOOLS_VERSION)-linux-amd64.tar.gz
	tar zxvf crictl.tar.gz -C $(LIBEXECDIR)

test:
	test -z "$$(gofmt -s -l . | grep -v '^vendor' | tee /dev/stderr)"
	test -z "$$(golint $$(go list -tags='$(GOTAGS)' ./... | grep -v /vendor/) | grep -v '/dctest/.*: should not use dot imports' | tee /dev/stderr)"
	go build -tags='$(GOTAGS)' ./...
	go test -tags='$(GOTAGS)' -race -v ./...
	RUN_COMPACTION_TEST=yes go test -tags='$(GOTAGS)' -race -v -run=TestEtcdCompaction ./worker/
	go vet -tags='$(GOTAGS)' ./...

clean:
	rm -rf $(DEB)

setup:
	GO111MODULE=off go get -u golang.org/x/lint/golint github.com/rakyll/statik
	$(SUDO) apt-get update
	$(SUDO) apt-get -y install --no-install-recommends $(PACKAGES)
	curl -fsSL -o protoc.zip https://github.com/google/protobuf/releases/download/v$(PROTOC_VERSION)/protoc-$(PROTOC_VERSION)-linux-x86_64.zip
	$(SUDO) unzip -o protoc.zip -d /usr/local

.PHONY:	all clean setup
