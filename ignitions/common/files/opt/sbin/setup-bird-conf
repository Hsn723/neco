#!/bin/sh

# converts IPv4 as "A.B.C.D" to integer
ip4_to_int() {
  IFS=. read -r i j k l <<EOF
$1
EOF
  echo "$(((i << 24) + (j << 16) + (k << 8) + l))"
}

# converts interger to IPv4 as "A.B.C.D"
int_to_ip4() {
  echo "$(( ($1 >> 24) % 256 )).$(( ($1 >> 16) % 256 )).$(( ($1 >> 8) % 256 )).$(( $1 % 256 ))"
}

LRN=$(cat /etc/neco/rack)

ipv4_offset_int=$(ip4_to_int 10.69.0.0)
tor1_address=$(int_to_ip4 $((ipv4_offset_int + (192 * LRN) + 64 * 1 + 1)))
tor2_address=$(int_to_ip4 $((ipv4_offset_int + (192 * LRN) + 64 * 2 + 1)))
asn=$((64600 + LRN))

mkdir -p /etc/bird/

cat >/etc/bird/bird.conf <<EOF
log stderr all;
protocol device {
    scan time 60;
}
protocol direct singles {
    ipv4;
    interface "node0";
}
protocol bfd {
    interface "*" {
       min rx interval 100 ms;
       min tx interval 100 ms;
    };
}
protocol kernel {
    merge paths;
    ipv4 {
        export filter {
            if source = RTS_DEVICE then reject;
            if proto = "coil" then reject;
            accept;
        };
    };
}
ipv4 table coiltab;
protocol kernel 'coil' {
    kernel table 119;  # coil exports
    learn;
    scan time 1;
    ipv4 {
        table coiltab;
        import all;
        export none;
    };
}
protocol pipe {
    table master4;
    peer table coiltab;
    import all;
    export none;
}
ipv4 table dummytab;
protocol static dummystatic {
    ipv4 { table dummytab; };
    route 0.0.0.0/0 via "lo";
}
template bgp tor {
    local as ${asn};
    direct;
    bfd;
    ipv4 {
        # Accept routes regardless of its NEXT_HOP.
        igp table dummytab;
        gateway recursive;
        import filter {
            # If this route came from iBGP peers,
            if bgp_next_hop.mask(26) = from.mask(26) then {
                # use the NEXT_HOP as the gateway address.
                gw = bgp_next_hop;
                accept;
            }
            # Otherwise, use the router address as the gateway address.
            # This is virtually equal to "next hop self" on receiver side.
            gw = from;
            accept;
        };
        export all;
    };
}
protocol bgp tor1 from tor {
    neighbor ${tor1_address} as ${asn};
}
protocol bgp tor2 from tor {
    neighbor ${tor2_address} as ${asn};
}
EOF
